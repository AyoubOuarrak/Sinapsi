package com.sinapsi.webservice.db;

import java.security.PrivateKey;
import java.security.PublicKey;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.crypto.SecretKey;

import com.bgp.keymanager.PrivateKeyManager;
import com.bgp.keymanager.PublicKeyManager;
import com.bgp.keymanager.SessionKeyManager;


/**
 * Class that perform query about keys
 * @author Ayoub
 *
 */
public class KeysManager {
	private DatabaseController db;
	
	/**
	 * Defautl ctor
	 */
	public KeysManager() {
		db = new DatabaseController();
	}
	
	/**
	 * Update the keys of user in the db
	 * @param email email of the user
	 * @param publicKey remote public key of the user generated by the client
	 * @param sessionKey remote encrypted session key generated by the client
	 * @throws Exception 
	 */
	public void updateRemoteKeys(String email, String publicKey, String sessionKey) throws Exception {
		 Connection c = null;
	     PreparedStatement s = null;
	        
	     try {
	    	 c = db.connect();
	    	 //TODO: find a way to save private key in a crypted way
	    	 String query = "UPDATE users SET publickey = ?, sessionkey = ? WHERE email = ?";
	         s = c.prepareStatement(query);
	         s.setString(1, publicKey);
	         s.setString(2, sessionKey);
	         s.setString(3, email);
	         s.execute();
	            
	     } catch(Exception e) {
	    	 db.disconnect(c, s);
	    	 throw e;
	     }
	     db.disconnect(c, s);
	}
	
	/**
	 * Update the keys of server in the db
	 * @param email email of the user
	 * @param publicKey locale public key of the user generated by the client
	 * @param sessionKey local encrypted session key generated by the client
	 * @param privateKey 
	 * @throws Exception 
	 */
	public void updateLocalKeys(String email, String publicKey, String privateKey, String sessionKey) throws Exception {
		 Connection c = null;
	     PreparedStatement s = null;
	        
	     try {
	    	 c = db.connect();
	    	 //TODO: find a way to save private key in a crypted way
	    	 String query = "UPDATE users SET localpublickey = ?, privatekey = ?, localsessionkey = ? WHERE email = ?";
	         s = c.prepareStatement(query);
	         s.setString(1, publicKey);
	         s.setString(2, privateKey);
	         s.setString(3, sessionKey);
	         s.setString(4, email);
	         s.execute();
	            
	     } catch(Exception e) {
	    	 db.disconnect(c, s);
	    	 throw e;
	     }
	     db.disconnect(c, s);
	}
	
	/**
	 * Return the public key from db
	 * @param email email of the user associated to the publick key in the db
	 * @return public key object
	 * @throws Exception
	 */
	public PublicKey getPublicKey(String email) throws Exception {
		 Connection c = null;
	     PreparedStatement s = null;
	     ResultSet r = null;
	     String publicKey = null;
	     try {
	    	 c = db.connect();
	         s = c.prepareStatement("SELECT publickey FROM users WHERE email = ?");
	         s.setString(1, email);
	         r = s.executeQuery();
	         if (r.next()) {
	            publicKey = r.getString("publickey");
	         }
	     } catch (SQLException ex) {
	         db.disconnect(c, s, r);
	         throw ex;
	     }
	     db.disconnect(c, s, r);
	     return PublicKeyManager.convertToKey(publicKey);
	}
	
	/**
	 * Return the private key from db
	 * @param email email of the user associated to the private key in the db
	 * @return public key object
	 * @throws Exception
	 */
	public PrivateKey getPrivateKey(String email) throws Exception {
		 Connection c = null;
	     PreparedStatement s = null;
	     ResultSet r = null;
	     String privateKey = null;
	     try {
	    	 c = db.connect();
	         s = c.prepareStatement("SELECT privatekey FROM users WHERE email = ?");
	         s.setString(1, email);
	         r = s.executeQuery();
	         if (r.next()) {
	            privateKey = r.getString("privatekey");
	         }
	     } catch (SQLException ex) {
	         db.disconnect(c, s, r);
	         throw ex;
	     }
	     db.disconnect(c, s, r);
	     return PrivateKeyManager.convertToKey(privateKey);
	}
	
	/**
	 * Return the session key from db
	 * @param email email of the user associated to the session key in the db
	 * @return public key object
	 * @throws Exception
	 */
	public SecretKey getSessionKey(String email) throws Exception {
		 Connection c = null;
	     PreparedStatement s = null;
	     ResultSet r = null;
	     String sessionKey = null;
	     try {
	    	 c = db.connect();
	         s = c.prepareStatement("SELECT sessionkey FROM users WHERE email = ?");
	         s.setString(1, email);
	         r = s.executeQuery();
	         if (r.next()) {
	            sessionKey = r.getString("sessionkey");
	         }
	     } catch (SQLException ex) {
	         db.disconnect(c, s, r);
	         throw ex;
	     }
	     db.disconnect(c, s, r);
	     return SessionKeyManager.convertToKey(sessionKey);
	}
}
