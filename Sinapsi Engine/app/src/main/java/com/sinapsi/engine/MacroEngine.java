package com.sinapsi.engine;

import com.sinapsi.model.DeviceInterface;
import com.sinapsi.model.MacroComponent;
import com.sinapsi.model.components.ActionWifiState;
import com.sinapsi.model.components.TriggerSMS;
import com.sinapsi.model.components.TriggerWifi;
import com.sinapsi.model.impl.Macro;

import java.util.HashMap;

/**
 * Macro engine class. Used to initialize the ComponentFactory
 * and to keep a list of all defined macros.
 */
public class MacroEngine {

    private DeviceInterface device;
    private ActivationManager activator;
    private ComponentFactory factory;

    private HashMap<String,Macro> macros = new HashMap<>();
    //private HashMap<String,Variable> engineVariables = new HashMap<>(); //TODO: for macro variables

    /**
     * Creates a new MacroEngine instance with a default component
     * class set.
     * @param currentDevice the devices on which this engine is running
     * @param activationManager the activation manager for trigger activation
     */
    public MacroEngine(DeviceInterface currentDevice,
                       ActivationManager activationManager){
        device = currentDevice;
        activator = activationManager;
        factory = new ComponentFactory(
                device,

                TriggerSMS.class,
                TriggerWifi.class,

                ActionWifiState.class
        );
    }

    /**
     * Creates a new MacroEngine instance with a custom component
     * class set.
     * @param currentDevice the devices on which this engine is running
     * @param activationManager the activation manager for trigger activation
     * @param componentClasses the set of component classes
     */
    public MacroEngine(DeviceInterface currentDevice,
                       ActivationManager activationManager,
                       Class<? extends MacroComponent>[] componentClasses){
        device = currentDevice;
        activator = activationManager;
        factory = new ComponentFactory(device, componentClasses);
    }

    /**
     * Getter of the ComponentFactory instance generated by this
     * MacroEngine
     * @return the component factory
     */
    public ComponentFactory getComponentFactory(){
        return factory;
    }

    /**
     * Adds a new macro to the list of defined macro. When added,
     * the macro's trigger is registered on the ActivationManager
     * and starts listening for system events.
     * @param m the macro
     */
    public void addMacro(Macro m){
        m.getTrigger().register(activator);
        macros.put(m.getName(), m);
    }




}
